<#@ Template Debug="false" HostSpecific="false" Language="C#" #>
<#@ Output Extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
using System;
using Xunit.Sdk;

namespace Jwc.Experiment
{
<#
for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++)
{
    var typeList = GetGenericList(typeCount, "T{0}");
    var argumentList = GetGenericList(
        typeCount,
        "fixture.Create(typeof(T{0}))",
        "," + Environment.NewLine + "                ");
#>
    /// <summary>
    /// Represents a weakly-typed test case that can be turned into an
    /// xUnit.net ITestCommand when returned from a test method adorned with
    /// the <see cref="DefaultFirstClassTheoremAttribute" />.
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification="This rule is suppressed to provide auto data to test method.")]
    public class TestCase<<#=typeList#>> : ITestCase
    {
        private readonly Delegate _delegate;

        /// <summary>
        /// Initializes a new instance of the <see cref="TestCase"/> class.
        /// </summary>
        /// <param name="action">The test action.</param>
        public TestCase(Action<<#=typeList#>> action)
        {
            if (action == null)
            {
                throw new ArgumentNullException("action");
            }

            if (action.GetInvocationList().Length != 1)
            {
                throw new ArgumentException(
                    "Composite actions are not supported, set only one action operation.",
                    "action");
            }

            _delegate = action;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestCase"/> class.
        /// </summary>
        /// <param name="func">The test function.</param>
        public TestCase(Func<<#=typeList#>, object> func)
        {
            if (func == null)
            {
                throw new ArgumentNullException("func");
            }

            if (func.GetInvocationList().Length != 1)
            {
                throw new ArgumentException(
                    "Composite functions are not supported, set only one function operation.",
                    "func");
            }

            _delegate = func;
        }

        /// <summary>
        /// Gets the test delegate.
        /// </summary>
        public Delegate Delegate
        {
            get
            {
                return _delegate;
            }
        }

        /// <summary>
        /// Converts the instance to an xUnit.net ITestCommand instance.
        /// </summary>
        /// <param name="method">
        /// The method adorned by a <see cref="DefaultFirstClassTheoremAttribute" />.
        /// </param>
        /// <param name="fixtureFactory">
        /// A test fixture factory to provide auto data.
        /// </param>
        /// <returns>
        /// An xUnit.net ITestCommand that represents the executable test case.
        /// </returns>
        public ITestCommand ConvertToTestCommand(IMethodInfo method, ITestFixtureFactory fixtureFactory)
        {
            if (method == null)
            {
                throw new ArgumentNullException("method");
            }

            if (fixtureFactory == null)
            {
                throw new ArgumentNullException("fixtureFactory");
            }

            var fixture = fixtureFactory.Create(Delegate.Method);
            var arguments = new[]
            {
                <#=argumentList#>
            };
            return new FirstClassCommand(method, Delegate, arguments);
        }
    }

<#
}
#>
}

<#+
private const int GenericTypeMax = 16;
private const int GenericTypeMin = 5;
private static readonly string[] ordinalNumbers = new[] { "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth" };
private static readonly string[] wordNumbers = new[] { "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen" };

public static string ConvertToWord(int number)
{
    return wordNumbers[number - 1];
}

public static string ConvertToOrdinal(int number)
{
    return ordinalNumbers[number - 1];
}

private static string GetGenericList(int typeCount, string format, string separator = ", ")
{
    return string.Join(separator, Enumerable.Range(1, typeCount).Select(n => string.Format(format, n)).ToArray());
}
#>