[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine", Justification = "The last line is generated by the code template.")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "To define several generic types with same names.")]

namespace Jwc.Experiment.Xunit
{
    using System;

    internal class TestCaseWithAuto<T1> : ITestCaseWithAuto<T1>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2> : ITestCaseWithAuto<T1, T2>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3> : ITestCaseWithAuto<T1, T2, T3>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4> : ITestCaseWithAuto<T1, T2, T3, T4>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5> : ITestCaseWithAuto<T1, T2, T3, T4, T5>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6, T7> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6, T7, T8> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

    internal class TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
    {
        private readonly object[] arguments;

        public TestCaseWithAuto(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase2 Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> @delegate)
        {
            return new TestCase2(@delegate, this.arguments);
        }
    }

}
