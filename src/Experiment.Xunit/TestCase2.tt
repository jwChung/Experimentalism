<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".tt.cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine", Justification = "The last line is generated by the code template.")]

namespace Jwc.Experiment.Xunit
{
    using System;

    public partial class TestCase : ITestCase
    {
<#
for (var i = 3; i <= GenericTypeMax; i++)
{
    var typeList = GetGenericList(i, "T{0}");
    var parameterList = GetGenericList(i, "T{0} arg{0}");
    var argumentList = GetGenericList(i, "arg{0}");
#>
        /// <summary>
        /// Returns a test case with arguments.
        /// </summary>
<#
for (var j = 1; j <= i; j++)
{
#>
        /// <typeparam name="<#=string.Format("T{0}", j)#>">
        /// A type of the <#=ConvertToOrdinal(j)#> argument.
        /// </typeparam>
<#
}
#>
<#
for (var j = 1; j <= i; j++)
{
#>
        /// <param name="<#=string.Format("arg{0}", j)#>">
        /// The <#=ConvertToOrdinal(j)#> argument.
        /// </param>
<#
}
#>
        /// <returns>
        /// The new test case with arguments.
        /// </returns>
        public static ITestCaseWithArgs<<#=typeList#>> WithArgs<<#=typeList#>>(<#=parameterList#>)
        {
            return new TestCaseWithArgs<<#=typeList#>>(<#=argumentList#>);
        }

        /// <summary>
        /// Returns a test case with arguments.
        /// </summary>
<#
for (var j = 1; j <= i; j++)
{
#>
        /// <typeparam name="<#=string.Format("T{0}", j)#>">
        /// A type of the <#=ConvertToOrdinal(j)#> argument.
        /// </typeparam>
<#
}
#>
<#
for (var j = 1; j <= i; j++)
{
#>
        /// <param name="<#=string.Format("arg{0}", j)#>">
        /// The <#=ConvertToOrdinal(j)#> argument.
        /// </param>
<#
}
#>
        /// <returns>
        /// The new test case with arguments.
        /// </returns>
        public static ITestCaseWithAuto<<#=typeList#>> WithAuto<<#=typeList#>>(<#=parameterList#>)
        {
            return new TestCaseWithAuto<<#=typeList#>>(<#=argumentList#>);
        }

<#
}
#>
    }
}
<#@ Include File="Helpers.tt" #>