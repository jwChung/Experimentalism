[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine", Justification = "The last line is generated by the code template.")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "To define several generic types with same names.")]

namespace Jwc.Experiment.Xunit
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    internal class TestCasesWithArgs<T1> : ITestCasesWithArgs<T1>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2> WithAuto<T2>()
        {
            return new TestCasesWithAuto<T1, T2>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3> WithAuto<T2, T3>()
        {
            return new TestCasesWithAuto<T1, T2, T3>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4> WithAuto<T2, T3, T4>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5> WithAuto<T2, T3, T4, T5>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6> WithAuto<T2, T3, T4, T5, T6>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T2, T3, T4, T5, T6, T7>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T2, T3, T4, T5, T6, T7, T8>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2> : ITestCasesWithArgs<T1, T2>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3> WithAuto<T3>()
        {
            return new TestCasesWithAuto<T1, T2, T3>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4> WithAuto<T3, T4>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5> WithAuto<T3, T4, T5>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6> WithAuto<T3, T4, T5, T6>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T3, T4, T5, T6, T7>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T3, T4, T5, T6, T7, T8>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T3, T4, T5, T6, T7, T8, T9>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3> : ITestCasesWithArgs<T1, T2, T3>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4> WithAuto<T4>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5> WithAuto<T4, T5>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6> WithAuto<T4, T5, T6>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T4, T5, T6, T7>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T4, T5, T6, T7, T8>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T4, T5, T6, T7, T8, T9>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T4, T5, T6, T7, T8, T9, T10>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4> : ITestCasesWithArgs<T1, T2, T3, T4>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5> WithAuto<T5>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6> WithAuto<T5, T6>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T5, T6, T7>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T5, T6, T7, T8>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T5, T6, T7, T8, T9>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T5, T6, T7, T8, T9, T10>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T5, T6, T7, T8, T9, T10, T11>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5> : ITestCasesWithArgs<T1, T2, T3, T4, T5>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6> WithAuto<T6>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T6, T7>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T6, T7, T8>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T6, T7, T8, T9>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T6, T7, T8, T9, T10>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T6, T7, T8, T9, T10, T11>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T6, T7, T8, T9, T10, T11, T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T7>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T7, T8>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T7, T8, T9>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T7, T8, T9, T10>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T7, T8, T9, T10, T11>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T7, T8, T9, T10, T11, T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T8>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T8, T9>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T8, T9, T10>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T8, T9, T10, T11>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T8, T9, T10, T11, T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T8, T9, T10, T11, T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T9>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T9, T10>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T9, T10, T11>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T9, T10, T11, T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T9, T10, T11, T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T9, T10, T11, T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T10>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T10, T11>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T10, T11, T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T10, T11, T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T10, T11, T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T10, T11, T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T11>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T11, T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T11, T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T11, T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T11, T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T11, T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T12>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T12, T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T12, T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T12, T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T12, T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T13>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T13, T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T13, T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T13, T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T14>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T14, T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T14, T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T15>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.argumentSet);
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T15, T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }

        public ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T16>()
        {
            return new TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.argumentSet);
        }
    }

    internal class TestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : ITestCasesWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithArgs(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

}
