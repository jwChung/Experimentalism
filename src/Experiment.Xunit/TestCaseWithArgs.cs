[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine", Justification = "The last line is generated by the code template.")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "To define several generic types with same names.")]

namespace Jwc.Experiment.Xunit
{
    using System;

    internal class TestCaseWithArgs<T1> : ITestCaseWithArgs<T1>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2> WithAuto<T2>()
        {
            return new TestCaseWithAuto<T1, T2>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3> WithAuto<T2, T3>()
        {
            return new TestCaseWithAuto<T1, T2, T3>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4> WithAuto<T2, T3, T4>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5> WithAuto<T2, T3, T4, T5>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6> WithAuto<T2, T3, T4, T5, T6>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T2, T3, T4, T5, T6, T7>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T2, T3, T4, T5, T6, T7, T8>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2> : ITestCaseWithArgs<T1, T2>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3> WithAuto<T3>()
        {
            return new TestCaseWithAuto<T1, T2, T3>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4> WithAuto<T3, T4>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5> WithAuto<T3, T4, T5>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6> WithAuto<T3, T4, T5, T6>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T3, T4, T5, T6, T7>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T3, T4, T5, T6, T7, T8>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T3, T4, T5, T6, T7, T8, T9>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3> : ITestCaseWithArgs<T1, T2, T3>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4> WithAuto<T4>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5> WithAuto<T4, T5>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6> WithAuto<T4, T5, T6>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T4, T5, T6, T7>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T4, T5, T6, T7, T8>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T4, T5, T6, T7, T8, T9>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T4, T5, T6, T7, T8, T9, T10>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4> : ITestCaseWithArgs<T1, T2, T3, T4>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5> WithAuto<T5>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6> WithAuto<T5, T6>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T5, T6, T7>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T5, T6, T7, T8>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T5, T6, T7, T8, T9>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T5, T6, T7, T8, T9, T10>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T5, T6, T7, T8, T9, T10, T11>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5> : ITestCaseWithArgs<T1, T2, T3, T4, T5>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6> WithAuto<T6>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T6, T7>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T6, T7, T8>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T6, T7, T8, T9>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T6, T7, T8, T9, T10>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T6, T7, T8, T9, T10, T11>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T6, T7, T8, T9, T10, T11, T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7> WithAuto<T7>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T7, T8>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T7, T8, T9>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T7, T8, T9, T10>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T7, T8, T9, T10, T11>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T7, T8, T9, T10, T11, T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T7, T8, T9, T10, T11, T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6, T7> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> WithAuto<T8>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T8, T9>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T8, T9, T10>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T8, T9, T10, T11>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T8, T9, T10, T11, T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T8, T9, T10, T11, T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T8, T9, T10, T11, T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6, T7, T8> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithAuto<T9>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T9, T10>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T9, T10, T11>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T9, T10, T11, T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T9, T10, T11, T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T9, T10, T11, T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T9, T10, T11, T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithAuto<T10>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T10, T11>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T10, T11, T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T10, T11, T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T10, T11, T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T10, T11, T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T10, T11, T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithAuto<T11>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T11, T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T11, T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T11, T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T11, T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T11, T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithAuto<T12>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T12, T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T12, T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T12, T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T12, T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithAuto<T13>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T13, T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T13, T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T13, T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithAuto<T14>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T14, T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T14, T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithAuto<T15>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T15, T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }

        public ITestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithAuto<T16>()
        {
            return new TestCaseWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this.arguments);
        }
    }

    internal class TestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : ITestCaseWithArgs<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }
    }

}
