<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine", Justification = "The last line is generated by the code template.")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "To define several generic types with same names.")]

namespace Jwc.Experiment.Xunit
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

<#
for (var i = 2; i <= GenericTypeMax; i++)
{
    var typeList = GetGenericList(i, "T{0}");
#>
    internal class TestCasesWithAuto<<#=typeList#>> : ITestCasesWithAuto<<#=typeList#>>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<<#=typeList#>> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

<#
}
#>
}
<#@ Include File="Helpers.tt" #>