[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine", Justification = "The last line is generated by the code template.")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "To define several generic types with same names.")]

namespace Jwc.Experiment.Xunit
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    internal class TestCasesWithAuto<T1, T2> : ITestCasesWithAuto<T1, T2>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3> : ITestCasesWithAuto<T1, T2, T3>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4> : ITestCasesWithAuto<T1, T2, T3, T4>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5> : ITestCasesWithAuto<T1, T2, T3, T4, T5>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

    internal class TestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : ITestCasesWithAuto<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
    {
        private readonly IEnumerable[] argumentSet;

        public TestCasesWithAuto(params IEnumerable[] argumentSet)
        {
            this.argumentSet = argumentSet;
        }

        public IEnumerable<ITestCase> Create(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> delegator)
        {
            var enumerators = this.argumentSet.Select(x => x.GetEnumerator()).ToArray();

            while (enumerators.All(e => e.MoveNext()))
                yield return new TestCase(delegator, enumerators.Select(x => x.Current).ToArray());
        }
    }

}
