<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine", Justification = "The last line is generated by the code template.")]

namespace Jwc.Experiment.Xunit
{
    using System;
    using System.Collections.Generic;

<#
for (var i = 1; i <= GenericTypeMax; i++)
{
    var typeList = GetGenericList(i, "T{0}");
#>
    /// <summary>
    /// Represents test cases with arguments.
    /// </summary>
<#
for (var j = 1; j <= i; j++)
{
#>
    /// <typeparam name="<#=string.Format("T{0}", j)#>">
    /// A type of the <#=ConvertToOrdinal(j)#> arguments.
    /// </typeparam>
<#
}
#>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "This rules is suppressed to pass many arguments to a test method.")]
    public interface ITestCasesWithArgs<<#=typeList#>> : IFluentInterface
    {
        /// <summary>
        /// Creates test cases with one arguments.
        /// </summary>
        /// <param name="delegator">
        /// A delegator representing the actual test method.
        /// </param>
        /// <returns>
        /// The new test cases.
        /// </returns>
        IEnumerable<ITestCase> Create(Action<<#=typeList#>> delegator);
<#
for (var j = i + 1; j <= GenericTypeMax; j++)
{
#>

        /// <summary>
        /// Create a test case with <#=ConvertToWord(j)#> arguments.
        /// </summary>
<#
for (var k = i + 1; k <= j; k++)
{
#>
        /// <typeparam name="<#=string.Format("T{0}", k)#>">
        /// A type of the <#=ConvertToOrdinal(k)#> arguments.
        /// </typeparam>
<#
}
#>
        /// <returns>
        /// The new test cases with the arguments.
        /// </returns>
        ITestCasesWithAuto<<#=GetGenericList(j, "T{0}")#>> WithAuto<<#=GetGenericList(i + 1, j - i, "T{0}")#>>();
<#
}
#>
    }

<#
}
#>
}
<#@ Include File="Helpers.tt" #>