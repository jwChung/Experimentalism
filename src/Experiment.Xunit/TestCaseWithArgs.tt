<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine", Justification = "The last line is generated by the code template.")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "To define several generic types with same names.")]

namespace Jwc.Experiment.Xunit
{
    using System;

<#
for (var i = 1; i <= GenericTypeMax; i++)
{
    var typeList = GetGenericList(i, "T{0}");
#>
    internal class TestCaseWithArgs<<#=typeList#>> : ITestCaseWithArgs<<#=typeList#>>
    {
        private readonly object[] arguments;

        public TestCaseWithArgs(params object[] arguments)
        {
            this.arguments = arguments;
        }

        public ITestCase Create(Action<<#=typeList#>> delegator)
        {
            if (delegator == null)
                throw new ArgumentNullException("delegator");

            return new TestCase(delegator, this.arguments);
        }
<#
for (var j = i; j < GenericTypeMax; j++)
{
#>

        public ITestCaseWithAuto<<#=GetGenericList(j + 1, "T{0}")#>> WithAuto<<#=GetGenericList(i + 1, j - i + 1, "T{0}")#>>()
        {
            return new TestCaseWithAuto<<#=GetGenericList(j + 1, "T{0}")#>>(this.arguments);
        }
<#
}
#>
    }

<#
}
#>
}
<#@ Include File="Helpers.tt" #>