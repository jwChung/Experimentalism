<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <ItemGroup>
    <CopyNuGetFiles Include="@(NuGetFiles)"/>
  </ItemGroup>
  <PropertyGroup>
    <NuGetPath>@(NuGetPath)</NuGetPath>
    <XunitRunnerPath>@(XunitRunnerPath)</XunitRunnerPath>
  </PropertyGroup>
  
  <Target Name="MakePrivateKeyFile">
    <PropertyGroup>
      <SignAssembly>true</SignAssembly>
    </PropertyGroup>
    <MakePrivateKeyFile PrivateKey="$(PrivateKey)"/>
  </Target>

  <Target Name="BuildProjects">
    <MSBuild Projects="@(Projects)"
             Targets="Rebuild;"
             Properties="Configuration=Release;
                         RunCodeAnalysis=true;
                         CodeAnalysisTreatWarningsAsErrors=true;
                         SignAssembly=$(SignAssembly);
                         AssemblyOriginatorKeyFile=..\..\build\PrivateKey.snk;
                         "/>
    <MSBuild Projects="@(TestProjects)"
             Targets="Build;"
             Properties="Configuration=Release;
                         DefineConstants=TRACE,CI;
                         "/>
    <OnError ExecuteTargets="DeleteKeyFiles" />
  </Target>

  <Target Name="DeleteKeyFiles">
    <ItemGroup>
      <KeyFiles Include="*.snk" />
    </ItemGroup>
    <Delete Files="@(KeyFiles)" />
  </Target>

  <Target Name="UnitTest">
    <ItemGroup>
      <TestAssemblies Include="$(TestAssemblies)" />
    </ItemGroup>
    <xunit Assembly="%(TestAssemblies.Identity)" />
  </Target>

  <Target Name="NuGetVersioning" Outputs="%(NuGetFiles.FullPath)">
    <ItemGroup>
      <TestAssemblies Include="$(TestAssemblies)" />
    </ItemGroup>
    <PropertyGroup>
      <Assembly>%(TestAssemblies.Identity)</Assembly>
      <NuGetFile>%(NuGetFiles.FullPath)</NuGetFile>
    </PropertyGroup>
    <GetSemanticVersion Assembly="$(Assembly)">
      <Output TaskParameter="SemanticVersion" PropertyName="SemanticVersion" />
    </GetSemanticVersion>
    <XmlPoke XmlInputPath="$(NuGetFile)"
             Query="//metadata/version"
             Value="$(SemanticVersion)" />
    <XmlPoke XmlInputPath="$(NuGetFile)"
             Query="//metadata/dependencies/dependency[@id='%(CopyNuGetFiles.Filename)']/@version"
             Value="$(SemanticVersion)" />
  </Target>

  <Target Name="NuGetReleaseNotes">
    <GetReleaseNotes CommonAssemblyInfo="%(CommonAssemblyInfo.Identity)">
      <Output TaskParameter="ReleaseNotes" PropertyName="ReleaseNotes" />
    </GetReleaseNotes>
    <XmlPoke XmlInputPath="%(NuGetFiles.FullPath)" Query="//metadata/releaseNotes" Value="$(ReleaseNotes)" />
    <OnError ExecuteTargets="RestoreNuGetVersion" />
  </Target>

  <Target Name="NuGetPack">
    <Exec Command="$(NuGetPath) pack %(NuGetFiles.Identity) -Symbols" ContinueOnError="true" />
  </Target>

  <Target Name="RestoreNuGetVersion" Outputs="%(NuGetFiles.FullPath)">
    <PropertyGroup>
      <NuGetFile>%(NuGetFiles.FullPath)</NuGetFile>
    </PropertyGroup>
    <GetSemanticVersion Assembly="$(Assembly)">
      <Output TaskParameter="SemanticVersion" PropertyName="SemanticVersion" />
    </GetSemanticVersion>
    <XmlPoke XmlInputPath="$(NuGetFile)"
             Query="//metadata/version"
             Value="0.0.0" />
    <XmlPoke XmlInputPath="$(NuGetFile)"
             Query="//metadata/dependencies/dependency[@id='%(CopyNuGetFiles.Filename)']/@version"
             Value="0.0.0" />
  </Target>

  <Target Name="RestoreReleaseNotes">
    <XmlPoke XmlInputPath="%(NuGetFiles.FullPath)" Query="//metadata/releaseNotes" Value="releaseNotes" />
  </Target>

  <Target Name="DeterminesCanPush">
    <Exec Command='git fetch origin -q --tags --depth 1' />
    <Exec Command='git for-each-ref --count=1 --sort="-*authordate"' ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="ConsoleOutput" />
    </Exec>
    <PropertyGroup>
      <CanPush>!$(ConsoleOutput.Contains($(SemanticVersion)))</CanPush>
    </PropertyGroup>
  </Target>

  <Target Name="NuGetPush">
    <ItemGroup>
      <NugetSymbolPackages Include="*.symbols.nupkg" />
      <NugetPackages Include="@(NuGetFiles->'%(RelativeDir)%(Filename).$(SemanticVersion).nupkg')" />
    </ItemGroup>
    <Exec Command="$(NuGetPath) setApiKey $(SetApiKey) -Verbosity quiet" />
    <Exec Command="$(NuGetPath) push %(NugetSymbolPackages.Identity)" ContinueOnError="true" />
    <Delete Files="@(NugetSymbolPackages)" />
    <Exec Command="$(NuGetPath) push %(NugetPackages.Identity)" />
    <Exec Command="$(NuGetPath) delete %(NuGetFiles.Filename) $(SemanticVersion) -NonInteractive" Condition="$(SemanticVersion.Contains('-'))" ContinueOnError="true" />
    <OnError ExecuteTargets="DeleteNupkgFiles" />
  </Target>

  <Target Name="NuGetPushToLocal">
    <ItemGroup>
      <NugetPackages Include="@(NuGetFiles->'%(RelativeDir)%(Filename).$(SemanticVersion).nupkg')" />
    </ItemGroup>
    <Copy SourceFiles="@(NugetPackages)" DestinationFolder="$(LocalNugetFeed)" />
  </Target>

  <Target Name="DeleteNupkgFiles">
    <ItemGroup>
      <NupkgFiles Include="*.nupkg" />
    </ItemGroup>
    <Delete Files="@(NupkgFiles)" />
  </Target>

  <Target Name="CreateReleaseNotes">
    <WriteLinesToFile
        File="ReleaseNotes.txt"
        Lines="$(ReleaseNotes)"
        Overwrite="true"/>
  </Target>

  <Target Name="GitTagging" Condition="!$(SemanticVersion.Contains('-'))">
    <Exec Command='git config user.name "$(CommitAuthor)"' />
    <Exec Command='git config user.email "$(CommitAuthorEmail)"' />
    <Exec Command='git tag -a -F ReleaseNotes.txt "v$(SemanticVersion)"' />
    <Exec Command='git push --quiet --tags --repo "$(Repository)"' />
    <OnError ExecuteTargets="DeleteReleaseNotes" />
  </Target>

  <Target Name="DeleteReleaseNotes">
    <Delete Files="ReleaseNotes.txt" />
  </Target>
</Project>