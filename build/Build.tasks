<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0" DefaultTargets="Verify">
  <UsingTask TaskName="MakePrivateKeyFile"
             TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <PrivateKey ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try
        {
            File.WriteAllBytes(
              "PrivateKey.snk",
              Convert.FromBase64String(PrivateKey));
        }
        catch (Exception ex)
        {
            Log.LogErrorFromException(ex);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask AssemblyFile="$(XunitRunnerPath)"
             TaskName="Xunit.Runner.MSBuild.xunit" />

  <UsingTask TaskName="GetSemanticVersion"
             TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <Assembly ParameterType="System.String" Required="true" />
      <SemanticVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace=" System.Diagnostics" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try
        {
            SemanticVersion = FileVersionInfo.GetVersionInfo(Assembly).ProductVersion;
        }
        catch (Exception ex)
        {
            Log.LogErrorFromException(ex);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="GetReleaseNotes"
            TaskFactory="CodeTaskFactory"
            AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <CommonAssemblyInfo ParameterType="System.String" Required="true" />
      <ReleaseNotes ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Text" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="System.Xml" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try
        {
            var input = File.ReadAllText(CommonAssemblyInfo, Encoding.UTF8);
            var match = Regex.Match(input, @"/\*([\S\s]*?)\*/");

            if (!match.Success)
            {
                ReleaseNotes = string.Empty;
                return true;
            }

            var targetString = match.Result("$1");

            var lines = targetString.Split(
                new[] { Environment.NewLine },
                StringSplitOptions.None)
                .SkipWhile(l => l.TrimStart(' ', '*') == string.Empty)
                .Reverse().SkipWhile(l => l.TrimStart(' ', '*') == string.Empty).Reverse();

            if (!lines.Any())
            {
                ReleaseNotes = string.Empty;
                return true;
            }

            var builder = new StringBuilder();
            var firstLine = lines.First();
            var indentation = 0;
            foreach (var ch in firstLine)
            {
                if (ch == '*') indentation++;
                else if (ch == ' ')indentation++;
                else break;
            }

            builder.AppendLine(new string(firstLine.Skip(indentation).ToArray()).TrimEnd());

            foreach (var line in lines.Skip(1))
                builder.AppendLine(new string(line.Skip(indentation).ToArray()).TrimEnd());

            builder.Remove(builder.Length - Environment.NewLine.Length, Environment.NewLine.Length);
            var result = new StringBuilder();
            using (var writer = new XmlTextWriter(new StringWriter(result)))
            {
                writer.WriteString(builder.ToString());
            }
            ReleaseNotes = result.ToString();
        }
        catch (Exception ex)
        {
            Log.LogErrorFromException(ex);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>