<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0" DefaultTargets="Verify">

  <Import Project="Build.config"/>
  
  <Target Name="Verify">
    <CallTarget Targets="
      BuildProjects;
      UnitTest;
      " />
  </Target>

  <Target Name="LocalDeployment">
    <CallTarget Targets="
      NuGetVersioning;
      NuGetReleaseNotes;
      NuGetPack;
      RestoreNuGetVersion;
      RestoreReleaseNotes;
      NuGetPushToLocal;
      DeleteNupkgFiles;
      " />
  </Target>
  
  <Target Name="Build">
    <CallTarget Targets="
      MakePrivateKeyFile;
      BuildProjects;
      DeleteKeyFiles;
      " />
  </Target>

  <Target Name="Tests">
    <CallTarget Targets="
      UnitTest;
      " />
  </Target>

  <Target Name="Deployment" Condition=" '$(CurrentBranchName)' == 'master' and !$(CommitMessage.StartsWith('Merge pull request #')) ">
    <CallTarget Targets="
      NuGetVersioning;
      NuGetReleaseNotes;
      NuGetPack;
      RestoreNuGetVersion;
      RestoreReleaseNotes;
      NuGetPush;
      DeleteNupkgFiles;
      CreateReleaseNotes;
      GitTagging;
      DeleteReleaseNotes;
      " />
  </Target>

  <Target Name="MakePrivateKeyFile">
    <PropertyGroup>
      <SignAssembly>true</SignAssembly>
    </PropertyGroup>
    <MakePrivateKeyFile PrivateKey="$(PrivateKey)"/>
  </Target>

  <Target Name="BuildProjects">
    <MSBuild Projects="@(Projects)"
             Targets="Rebuild;"
             Properties="Configuration=Release;
                         RunCodeAnalysis=true;
                         CodeAnalysisTreatWarningsAsErrors=true;
                         SignAssembly=$(SignAssembly);
                         AssemblyOriginatorKeyFile=..\..\build\PrivateKey.snk;
                         "/>
    <MSBuild Projects="@(TestProjects)"
             Targets="Build;"
             Properties="Configuration=Release;
                         DefineConstants=TRACE,CI;
                         "/>
    <OnError ExecuteTargets="DeleteKeyFiles" />
  </Target>

  <Target Name="DeleteKeyFiles">
    <ItemGroup>
      <KeyFiles Include="*.snk" />
    </ItemGroup>
    <Delete Files="@(KeyFiles)" />
  </Target>

  <Target Name="UnitTest">
    <xunit Assembly="%(TestAssemblies.Identity)" />
  </Target>

  <Target Name="NuGetVersioning">
    <PropertyGroup>
      <Assembly>%(TestAssemblies.Identity)</Assembly>
    </PropertyGroup>
    <GetSemanticVersion Assembly="$(Assembly)">
      <Output TaskParameter="SemanticVersion" PropertyName="SemanticVersion" />
    </GetSemanticVersion>
    <XmlPoke XmlInputPath="%(NuGetFiles.FullPath)" Query="//metadata/version" Value="$(SemanticVersion)" />
  </Target>

  <Target Name="NuGetReleaseNotes">
    <GetReleaseNotes CommonAssemblyInfo="%(CommonAssemblyInfo.Identity)">
      <Output TaskParameter="ReleaseNotes" PropertyName="ReleaseNotes" />
    </GetReleaseNotes>
    <XmlPoke XmlInputPath="%(NuGetFiles.FullPath)" Query="//metadata/releaseNotes" Value="$(ReleaseNotes)" />
    <OnError ExecuteTargets="RestoreNuGetVersion" />
  </Target>

  <Target Name="NuGetPack">
    <Exec Command="$(NuGetPath) pack %(NuGetFiles.Identity) -Symbols" />
  </Target>

  <Target Name="RestoreNuGetVersion">
    <XmlPoke XmlInputPath="%(NuGetFiles.FullPath)" Query="//metadata/version" Value="0.0.0" />
  </Target>

  <Target Name="RestoreReleaseNotes">
    <XmlPoke XmlInputPath="%(NuGetFiles.FullPath)" Query="//metadata/releaseNotes" Value="releaseNotes" />
  </Target>

  <Target Name="NuGetPush">
    <ItemGroup>
      <NugetPackages Include="@(NuGetFiles->'%(RelativeDir)%(Filename).$(SemanticVersion).nupkg')" />
    </ItemGroup>
    <Exec Command="$(NuGetPath) push %(NugetPackages.Identity) $(SetApiKey)" />
    <Exec Command="$(NuGetPath) delete %(NuGetFiles.Filename) $(SemanticVersion) $(SetApiKey) -NonInteractive" Condition="$(SemanticVersion.Contains('-'))" />
    <OnError ExecuteTargets="DeleteNupkgFiles" />
  </Target>

  <Target Name="NuGetPushToLocal">
    <ItemGroup>
      <NugetPackages Include="@(NuGetFiles->'%(RelativeDir)%(Filename).$(SemanticVersion).nupkg')" />
    </ItemGroup>
    <Copy SourceFiles="@(NugetPackages)" DestinationFolder="$(LocalNugetFeed)" />
  </Target>

  <Target Name="DeleteNupkgFiles">
    <ItemGroup>
      <NupkgFiles Include="*.nupkg" />
    </ItemGroup>
    <Delete Files="@(NupkgFiles)" />
  </Target>

  <Target Name="CreateReleaseNotes">
    <WriteLinesToFile
        File="ReleaseNotes.txt"
        Lines="$(ReleaseNotes)"
        Overwrite="true"/>
  </Target>

  <Target Name="GitTagging" Condition="!$(SemanticVersion.Contains('-'))">
    <Exec Command='git config user.name "$(CommitAuthor)"' />
    <Exec Command='git config user.email "$(CommitAuthorEmail)"' />
    <Exec Command='git tag -a -F ReleaseNotes.txt $(SemanticVersion)' />
    <Exec Command='git push --quiet --tags --repo "$(Repository)"' />
    <OnError ExecuteTargets="DeleteReleaseNotes" />
  </Target>

  <Target Name="DeleteReleaseNotes">
    <Delete Files="ReleaseNotes.txt" />
  </Target>

  <UsingTask TaskName="MakePrivateKeyFile"
             TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <PrivateKey ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try
        {
            File.WriteAllBytes(
              "PrivateKey.snk",
              Convert.FromBase64String(PrivateKey));
        }
        catch (Exception ex)
        {
            Log.LogErrorFromException(ex);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask AssemblyFile="$(XunitRunnerPath)"
             TaskName="Xunit.Runner.MSBuild.xunit" />

  <UsingTask TaskName="GetSemanticVersion"
             TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <Assembly ParameterType="System.String" Required="true" />
      <SemanticVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace=" System.Diagnostics" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try
        {
            SemanticVersion = FileVersionInfo.GetVersionInfo(Assembly).ProductVersion;
        }
        catch (Exception ex)
        {
            Log.LogErrorFromException(ex);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="GetReleaseNotes"
            TaskFactory="CodeTaskFactory"
            AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <CommonAssemblyInfo ParameterType="System.String" Required="true" />
      <ReleaseNotes ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Text" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try
        {
            var input = File.ReadAllText(CommonAssemblyInfo, Encoding.UTF8);
            var match = Regex.Match(input, @"/\*([\S\s]*?)\*/");

            if (!match.Success)
            {
                ReleaseNotes = string.Empty;
                return true;
            }

            var targetString = match.Result("$1");

            var lines = targetString.Split(
                new[] { Environment.NewLine },
                StringSplitOptions.None)
                .SkipWhile(l => l.TrimStart(' ', '*') == string.Empty)
                .Reverse().SkipWhile(l => l.TrimStart(' ', '*') == string.Empty).Reverse();

            if (!lines.Any())
            {
                ReleaseNotes = string.Empty;
                return true;
            }

            var builder = new StringBuilder();
            var firstLine = lines.First();
            var indentation = 0;
            foreach (var ch in firstLine)
            {
                if (ch == '*') indentation++;
                else if (ch == ' ')indentation++;
                else break;
            }

            builder.AppendLine(new string(firstLine.Skip(indentation).ToArray()).TrimEnd());

            foreach (var line in lines.Skip(1))
                builder.AppendLine(new string(line.Skip(indentation).ToArray()).TrimEnd());

            builder.Remove(builder.Length - Environment.NewLine.Length, Environment.NewLine.Length);
            ReleaseNotes = builder.ToString();
        }
        catch (Exception ex)
        {
            Log.LogErrorFromException(ex);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>
  
</Project>